type AuctionError = variant {
  NoBids;
  TooEarlyToBeginAuction;
  BiddingTooSmall;
  AuctionNotFound;
};

type AuctionInfo = record {
  auction_time : nat64;
  auction_id : nat64;
  first_transaction_id : nat;
  last_transaction_id : nat;
  tokens_distributed : nat;
  cycles_collected : nat64;
  fee_ratio : float64;
};

type BiddingInfo = record {
  caller_cycles : nat64;
  auction_period : nat64;
  accumulated_fees : nat;
  last_auction : nat64;
  total_cycles : nat64;
  fee_ratio : float64;
};

type Metadata = record {
  fee : nat;
  decimals : nat8;
  owner : principal;
  logo : text;
  name : text;
  totalSupply : nat;
  symbol : text;
  feeTo : principal;
};

type Operation = variant {
  Approve;
  Burn;
  Mint;
  Auction;
  Transfer;
  TransferFrom;
};

type Result = variant { Ok : nat; Err : TxError };
type Result_1 = variant { Ok : AuctionInfo; Err : AuctionError };
type Result_2 = variant { Ok : nat64; Err : AuctionError };
type Result_3 = variant { Ok; Err : TxError };

type TokenInfo = record {
  holderNumber : nat64;
  deployTime : nat64;
  metadata : Metadata;
  historySize : nat64;
  cycles : nat64;
  feeTo : principal;
};

type TransactionStatus = variant { Failed; Succeeded };

type TxError = variant {
  AlreadyNotified;
  InsufficientAllowance;
  InsufficientBalance;
  Unauthorized;
  NotificationFailed;
  TransactionDoesNotExist;
};

type TxRecord = record {
  to : principal;
  fee : nat;
  status : TransactionStatus;
  from : principal;
  operation : Operation;
  timestamp : int;
  caller : opt principal;
  index : nat;
  amount : nat;
};

service : (Metadata) -> {
  allowance : (principal, principal) -> (nat) query;
  approve : (principal, nat) -> (Result);
  auctionInfo : (nat64) -> (Result_1) query;
  balanceOf : (principal) -> (nat) query;
  bidCycles : () -> (Result_2);
  biddingInfo : () -> (BiddingInfo) query;
  burn : (nat) -> (Result);
  decimals : () -> (nat8) query;
  getAllowanceSize : () -> (nat64) query;
  getHolders : (nat64, nat64) -> (vec record { principal; nat }) query;
  getMetadata : () -> (Metadata) query;
  getMinCycles : () -> (nat64) query;
  getTokenInfo : () -> (TokenInfo) query;
  getTransaction : (nat) -> (TxRecord) query;
  getTransactions : (nat, nat) -> (vec TxRecord) query;
  getUserApprovals : (principal) -> (vec record { principal; nat }) query;
  getUserTransactionAmount : (principal) -> (nat) query;
  getUserTransactions : (principal, nat, nat) -> (vec TxRecord) query;
  historySize : () -> (nat64) query;
  logo : () -> (text) query;
  mint : (principal, nat) -> (Result);
  name : () -> (text) query;
  notify : (nat) -> (Result);
  owner : () -> (principal) query;
  runAuction : () -> (Result_1);
  setAuctionPeriod : (nat64) -> (Result_3);
  setFee : (nat) -> ();
  setFeeTo : (principal) -> ();
  setLogo : (text) -> ();
  setMinCycles : (nat64) -> (Result_3);
  setName : (text) -> ();
  setOwner : (principal) -> ();
  symbol : () -> (text) query;
  totalSupply : () -> (nat) query;
  transfer : (principal, nat) -> (Result);
  transferAndNotify : (principal, nat) -> (Result);
  transferFrom : (principal, principal, nat) -> (Result);
}
